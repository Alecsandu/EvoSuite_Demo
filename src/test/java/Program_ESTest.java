/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 27 17:54:04 GMT 2023
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Program_ESTest extends Program_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Program program0 = new Program();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("0n4MHWM8R&VV#bT&4");
      linkedList0.add("[q$<su/+");
      linkedList0.add("");
      linkedList0.add("Q!V&5_jSy");
      linkedList0.add("INVALID VALUE FOR N");
      String string0 = program0.checkForInterestingWords(4, 0, linkedList0);
      assertEquals("INVALID VALUE FOR N", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Program program0 = new Program();
      // Undeclared exception!
      try { 
        program0.checkForInterestingWords(861, (-1135), (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Program", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Program program0 = new Program();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("INVALID VALUE FOR N");
      linkedList0.add("");
      linkedList0.add("");
      linkedList0.add("INVALID VALUE FOR N");
      String string0 = program0.checkForInterestingWords(4, 0, linkedList0);
      assertEquals("EQUAL", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Program program0 = new Program();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("[q$<su/+");
      linkedList0.add("[q$<su/+");
      linkedList0.add("");
      linkedList0.add("INVALID VALUE FOR N");
      String string0 = program0.checkForInterestingWords(4, 0, linkedList0);
      assertEquals(4, linkedList0.size());
      assertEquals("HIGHER", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Program program0 = new Program();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("c&");
      String string0 = program0.checkForInterestingWords(1, 10, linkedList0);
      assertEquals("INVALID VALUE FOR K", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Program program0 = new Program();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addFirst("");
      String string0 = program0.checkForInterestingWords(1, (-342), linkedList0);
      assertEquals("INVALID VALUE FOR K", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Program program0 = new Program();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("0n4MHWM8R&VV#bT&4");
      linkedList0.add("[q$<su/+");
      linkedList0.add("");
      linkedList0.add("Q!V&5_jSy");
      String string0 = program0.checkForInterestingWords(4, 4, linkedList0);
      assertEquals(4, linkedList0.size());
      assertEquals("LOWER", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Program program0 = new Program();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = program0.checkForInterestingWords(3671, 3671, linkedList0);
      assertEquals("INVALID VALUE FOR N", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Program program0 = new Program();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = program0.checkForInterestingWords((-65), (-65), linkedList0);
      assertEquals("INVALID VALUE FOR N", string0);
  }
}
